package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"gogingraphqleg/graph/model"
)

// Feedbacks is the resolver for the feedbacks field.
func (r *queryResolver) Feedbacks(ctx context.Context) ([]*model.Feedback, error) {
	var feedbacks []*model.Feedback
	if err := r.DB.Find(&feedbacks).Error; err != nil {
		return nil, err
	}
	return feedbacks, nil
}

// Feedback is the resolver for the feedback field.
func (r *queryResolver) Feedback(ctx context.Context, id string) (*model.Feedback, error) {
	var feedback model.Feedback
	// Execute the exact SQL query using GORM's Raw method with proper field mapping
	query := `
		SELECT 
			"Id" AS id, 
			"ProductId" AS product_id, 
			"UserId" AS user_id, 
			"ProfileName", 
			"HelpfulnessNumerator", 
			"HelpfulnessDenominator", 
			"Score", 
			"Time", 
			"Summary", 
			"Text" 
		FROM "feedbacks" 
		WHERE "Id" = ? 
		ORDER BY "Id" LIMIT 1`
	if err := r.DB.Raw(query, id).Scan(&feedback).Error; err != nil {
		return nil, err
	}
	return &feedback, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
